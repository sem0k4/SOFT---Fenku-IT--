version: '3.8'

services:
  # =============================================================================
  # DATABASE SERVICE
  # =============================================================================
  db:
    image: postgres:15-alpine
    container_name: fajma_db
    environment:
      POSTGRES_DB: fajma_db
      POSTGRES_USER: fajma_user
      POSTGRES_PASSWORD: fajma_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    networks:
      - fajma_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fajma_user -d fajma_db"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # REDIS SERVICE
  # =============================================================================
  redis:
    image: redis:7-alpine
    container_name: fajma_redis
    command: redis-server --appendonly yes --requirepass fajma_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - fajma_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "fajma_redis_password", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # BACKEND SERVICE
  # =============================================================================
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: fajma_backend
    environment:
      - DEBUG=False
      - SECRET_KEY=your-production-secret-key-here
      - DATABASE_URL=postgresql://fajma_user:fajma_password@db:5432/fajma_db
      - REDIS_URL=redis://:fajma_redis_password@redis:6379/0
      - ALLOWED_HOSTS=localhost,127.0.0.1,backend,frontend
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173,http://frontend:3000
    volumes:
      - ./backend:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - fajma_network
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
    command: >
      sh -c "python manage.py collectstatic --noinput &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"

  # =============================================================================
  # FRONTEND SERVICE
  # =============================================================================
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: fajma_frontend
    environment:
      - VITE_API_BASE_URL=http://localhost:8000/api
      - VITE_WS_BASE_URL=ws://localhost:8000/ws
      - NODE_ENV=production
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    networks:
      - fajma_network
    depends_on:
      - backend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # NGINX REVERSE PROXY
  # =============================================================================
  nginx:
    image: nginx:alpine
    container_name: fajma_nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/default.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/var/www/static
      - media_volume:/var/www/media
      - ./nginx/ssl:/etc/nginx/ssl
    ports:
      - "80:80"
      - "443:443"
    networks:
      - fajma_network
    depends_on:
      - backend
      - frontend
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # =============================================================================
  # MONITORING SERVICES
  # =============================================================================
  
  # Prometheus pour les métriques
  prometheus:
    image: prom/prometheus:latest
    container_name: fajma_prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - fajma_network
    restart: unless-stopped
    profiles:
      - monitoring

  # Grafana pour la visualisation
  grafana:
    image: grafana/grafana:latest
    container_name: fajma_grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3001:3000"
    networks:
      - fajma_network
    depends_on:
      - prometheus
    restart: unless-stopped
    profiles:
      - monitoring

  # =============================================================================
  # DEVELOPMENT SERVICES
  # =============================================================================
  
  # Adminer pour la gestion de base de données
  adminer:
    image: adminer:latest
    container_name: fajma_adminer
    ports:
      - "8080:8080"
    networks:
      - fajma_network
    depends_on:
      - db
    restart: unless-stopped
    profiles:
      - development

  # Redis Commander pour la gestion Redis
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: fajma_redis_commander
    environment:
      - REDIS_HOSTS=local:redis:6379:0:fajma_redis_password
    ports:
      - "8081:8081"
    networks:
      - fajma_network
    depends_on:
      - redis
    restart: unless-stopped
    profiles:
      - development

# =============================================================================
# VOLUMES
# =============================================================================
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  static_volume:
    driver: local
  media_volume:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# =============================================================================
# NETWORKS
# =============================================================================
networks:
  fajma_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# =============================================================================
# CONFIGURATION PROFILES
# =============================================================================
# 
# Utilisation des profils:
# 
# Production complète:
# docker-compose up -d
# 
# Avec monitoring:
# docker-compose --profile monitoring up -d
# 
# Développement avec outils:
# docker-compose --profile development up -d
# 
# Tous les services:
# docker-compose --profile monitoring --profile development up -d
# 
# =============================================================================