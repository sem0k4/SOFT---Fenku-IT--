
CREATE EXTENSION IF NOT EXISTS citext;
-- Table pour normaliser les types d'antécédents
CREATE TABLE types_antecedents (
  type_id SERIAL PRIMARY KEY,
  nom varchar(50) NOT NULL
);

-- Table pour normaliser les services offerts par les hôpitaux
CREATE TABLE services (
  service_id SERIAL PRIMARY KEY,
  nom varchar(100) NOT NULL
);
-- Table pour les hôpitaux
CREATE TABLE hopital (
  hopital_id SERIAL PRIMARY KEY,
  nom varchar(100) NOT NULL,
  rue varchar(100) NOT NULL,
  ville varchar(100) NOT NULL,
  code_postal varchar(10),
  Telephone varchar(15) NOT NULL CHECK (Telephone ~ '^\+?[1-9]\d{1,14}$'),
  Email citext NOT NULL CHECK (Email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'),
  capacite integer NOT NULL CHECK (capacite >= 0)
);
-- Table de jointure pour les services des hôpitaux
CREATE TABLE hopital_services (
  hopital_id int NOT NULL,
  service_id int NOT NULL,
  PRIMARY KEY (hopital_id, service_id),
  FOREIGN KEY (hopital_id) REFERENCES hopital(hopital_id) ON DELETE CASCADE,
  FOREIGN KEY (service_id) REFERENCES services(service_id) ON DELETE CASCADE
);



-- Table pour les utilisateurs

CREATE TABLE utilisateur (
  user_id SERIAL PRIMARY KEY,
  login varchar(50) NOT NULL UNIQUE,
  email varchar(255) NOT NULL UNIQUE,
  password varchar(255) NOT NULL,
  role varchar(20) NOT NULL CHECK (role IN ('patient', 'medecin', 'admin')),
  first_name varchar(50),
  last_name varchar(50),
  date_joined timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP, -- Remplace date_creation
  email_verifie boolean DEFAULT false,
  is_active boolean DEFAULT true,
  last_login timestamp
);
-- Table pour les médecins
CREATE TABLE medecin (
  medecin_id SERIAL PRIMARY KEY,
  prenom varchar(100) NOT NULL,
  nom varchar(100) NOT NULL,
  Telephone varchar(15) NOT NULL CHECK (Telephone ~ '^\+?[1-9]\d{1,14}$'),
  Email citext NOT NULL CHECK (Email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'),
  hopital_id int NOT NULL,
  user_id int DEFAULT null,
  specialite varchar(50) NOT NULL,
  FOREIGN KEY (hopital_id) REFERENCES hopital(hopital_id) ON DELETE RESTRICT,
  FOREIGN KEY (user_id) REFERENCES utilisateur(user_id) ON DELETE SET NULL
);

-- Table pour les patients
CREATE TABLE patient (
  patient_id SERIAL PRIMARY KEY,
  prenom varchar(100) NOT NULL,
  nom varchar(100) NOT NULL,
  Date_Naissance date NOT NULL,
  sexe varchar(10) CHECK (sexe IN ('M', 'F', 'Autre')),
  numero_identification_national varchar(50),
  rue varchar(100) NOT NULL,
  ville varchar(100) NOT NULL,
  code_postal varchar(10),
  Telephone varchar(15) NOT NULL CHECK (Telephone ~ '^\+?[1-9]\d{1,14}$'),
  Email citext NOT NULL CHECK (Email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'),
  user_id int DEFAULT null,
  FOREIGN KEY (user_id) REFERENCES utilisateur(user_id) ON DELETE SET NULL
);

-- Type ENUM pour le statut des capteurs
CREATE TYPE capteur_statut AS ENUM ('actif', 'inactif', 'en panne');

-- Table pour les capteurs IoT
CREATE TABLE capteuriot (
  capteur_id SERIAL PRIMARY KEY,
  patient_id int NOT NULL,
  type varchar(50) NOT NULL,
  DateInstallation date NOT NULL,
  Statut capteur_statut NOT NULL,
  FOREIGN KEY (patient_id) REFERENCES patient(patient_id) ON DELETE CASCADE
);

-- Table pour les médicaments
CREATE TABLE medicaments (
  medicaments_id SERIAL PRIMARY KEY,
  nom varchar(100) NOT NULL
);

-- Table pour les consultations
CREATE TABLE consultation (
  consultation_id SERIAL PRIMARY KEY,
  patient_id int NOT NULL,
  capteur_id int NOT NULL,
  valeur numeric NOT NULL,
  medecin_id int NOT NULL,
  Date_Consultation timestamp NOT NULL,
  session_video_id varchar(100),
  Prescription text,
  diagnostic text,
  Notes text,
  FOREIGN KEY (patient_id) REFERENCES patient(patient_id) ON DELETE CASCADE,
  FOREIGN KEY (capteur_id) REFERENCES capteuriot(capteur_id) ON DELETE RESTRICT,
  FOREIGN KEY (medecin_id) REFERENCES medecin(medecin_id) ON DELETE RESTRICT
);

-- Table pour les ordonnances
CREATE TABLE ordonnance (
  ordonnance_id SERIAL PRIMARY KEY,
  patient_id int NOT NULL,
  medecin_id int NOT NULL,
  consultation_id int NOT NULL,
  Date_Ordonnance date NOT NULL,
  notes text,
  FOREIGN KEY (patient_id) REFERENCES patient(patient_id) ON DELETE CASCADE,
  FOREIGN KEY (medecin_id) REFERENCES medecin(medecin_id) ON DELETE RESTRICT,
  FOREIGN KEY (consultation_id) REFERENCES consultation(consultation_id) ON DELETE CASCADE
);

-- Table pour les lignes d'ordonnance
CREATE TABLE LigneOrdonnance (
  ligne_id SERIAL PRIMARY KEY,
  ordonnance_id int NOT NULL,
  medicaments_id int NOT NULL,
  quantite int NOT NULL CHECK (quantite > 0),
  posologie text,
  FOREIGN KEY (ordonnance_id) REFERENCES ordonnance(ordonnance_id) ON DELETE CASCADE,
  FOREIGN KEY (medicaments_id) REFERENCES medicaments(medicaments_id) ON DELETE RESTRICT
);

-- Table pour les analyses médicales
CREATE TABLE Analyses (
  analyse_id SERIAL PRIMARY KEY,
  patient_id int NOT NULL,
  type_analyse varchar(50) NOT NULL,
  resultat text NOT NULL,
  date timestamp NOT NULL,
  FOREIGN KEY (patient_id) REFERENCES patient(patient_id) ON DELETE CASCADE
);

-- Table pour les radiographies et échographies
CREATE TABLE RadiographieEchographie (
  image_id SERIAL PRIMARY KEY,
  patient_id int NOT NULL,
  type varchar(50) NOT NULL CHECK (type IN ('radiographie', 'echographie', 'autre')),
  fichier_path varchar(255) NOT NULL,
  date timestamp NOT NULL,
  FOREIGN KEY (patient_id) REFERENCES patient(patient_id) ON DELETE CASCADE
);

-- Table pour les antécédents médicaux
CREATE TABLE Antecedent (
  Antecedent_id SERIAL PRIMARY KEY,
  patient_id int NOT NULL,
  Description text NOT NULL,
  type_id int NOT NULL,
  FOREIGN KEY (patient_id) REFERENCES patient(patient_id) ON DELETE CASCADE,
  FOREIGN KEY (type_id) REFERENCES types_antecedents(type_id) ON DELETE RESTRICT
);

-- Table pour les données biométriques
CREATE TABLE Biometrie (
  biometrie_id SERIAL PRIMARY KEY,
  patient_id int NOT NULL,
  GroupeSanguin varchar(10) NOT NULL CHECK (GroupeSanguin IN ('A+', 'A-', 'B+', 'B-', 'AB+', 'AB-', 'O+', 'O-')),
  Poids numeric(5,2) NOT NULL CHECK (Poids > 0),
  Taille numeric(5,2) NOT NULL CHECK (Taille > 0),
  FOREIGN KEY (patient_id) REFERENCES patient(patient_id) ON DELETE CASCADE
);

-- Table pour le carnet de consultation
CREATE TABLE carnetconsultation (
  carnet_id SERIAL PRIMARY KEY,
  patient_id int NOT NULL,
  note text NOT NULL,
  date timestamp NOT NULL,
  FOREIGN KEY (patient_id) REFERENCES patient(patient_id) ON DELETE CASCADE
);

-- Table pour les factures
CREATE TABLE facture (
  facture_id SERIAL PRIMARY KEY,
  patient_id int NOT NULL,
  montant decimal(10,2) NOT NULL CHECK (montant >= 0),
  date_emission date NOT NULL,
  description text,
  statut_paiement varchar(20) DEFAULT 'en_attente' CHECK (statut_paiement IN ('en_attente', 'paye', 'annule')),
  FOREIGN KEY (patient_id) REFERENCES patient(patient_id) ON DELETE CASCADE
);

-- Type ENUM pour le statut des rendez-vous
CREATE TYPE rdv_statut AS ENUM ('planifie', 'annule', 'termine');

-- Table pour les rendez-vous
CREATE TABLE rendezvous (
  rdv_id SERIAL PRIMARY KEY,
  patient_id int NOT NULL,
  medecin_id int NOT NULL,
  date timestamp NOT NULL,
  statut rdv_statut DEFAULT 'planifie',
  FOREIGN KEY (patient_id) REFERENCES patient(patient_id) ON DELETE CASCADE,
  FOREIGN KEY (medecin_id) REFERENCES medecin(medecin_id) ON DELETE RESTRICT
);

-- Table pour les journaux d'activité
CREATE TABLE logs (
  log_id SERIAL PRIMARY KEY,
  user_id int NOT NULL,
  action varchar(255) NOT NULL,
  created_at timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  details text,
  FOREIGN KEY (user_id) REFERENCES utilisateur(user_id) ON DELETE CASCADE
);

-- Table pour les salles
CREATE TABLE salle (
  salle_id SERIAL PRIMARY KEY,
  hopital_id int NOT NULL,
  nom varchar(100) NOT NULL,
  FOREIGN KEY (hopital_id) REFERENCES hopital(hopital_id) ON DELETE CASCADE
);

-- Table pour les lits
CREATE TABLE lit (
  lit_id SERIAL PRIMARY KEY,
  salle_id int NOT NULL,
  numero smallint NOT NULL CHECK (numero > 0),
  FOREIGN KEY (salle_id) REFERENCES salle(salle_id) ON DELETE CASCADE
);

-- Table pour les hospitalisations
CREATE TABLE hospitalisation (
  hospitalisation_id SERIAL PRIMARY KEY,
  patient_id int NOT NULL,
  lit_id int NOT NULL,
  date_debut timestamp NOT NULL,
  date_fin timestamp DEFAULT null,
  motif text,
  FOREIGN KEY (patient_id) REFERENCES patient(patient_id) ON DELETE CASCADE,
  FOREIGN KEY (lit_id) REFERENCES lit(lit_id) ON DELETE RESTRICT
);

-- Table pour les ambulances
CREATE TABLE ambulance (
  ambulance_id SERIAL PRIMARY KEY,
  hopital_id int NOT NULL,
  immatriculation varchar(20) NOT NULL,
  FOREIGN KEY (hopital_id) REFERENCES hopital(hopital_id) ON DELETE CASCADE
);

-- Table pour les services d'accueil
CREATE TABLE serviceaccueil (
  service_id SERIAL PRIMARY KEY,
  hopital_id int NOT NULL,
  nom varchar(100) NOT NULL,
  FOREIGN KEY (hopital_id) REFERENCES hopital(hopital_id) ON DELETE CASCADE
);



-- Table pour les conseils de santé
CREATE TABLE conseils_sante (
  conseil_id SERIAL PRIMARY KEY,
  contenu text NOT NULL,
  auteur_id int NOT NULL,
  date_publication timestamp NOT NULL,
  patient_id int DEFAULT null,
  FOREIGN KEY (auteur_id) REFERENCES utilisateur(user_id) ON DELETE RESTRICT,
  FOREIGN KEY (patient_id) REFERENCES patient(patient_id) ON DELETE CASCADE
);

-- Table pour les déclarations de naissance
CREATE TABLE declarations_naissance (
  declaration_id SERIAL PRIMARY KEY,
  patient_id int NOT NULL,
  parent_id int NOT NULL,
  date_declaration date NOT NULL,
  statut varchar(20) NOT NULL CHECK (statut IN ('en_attente', 'validee', 'rejetee')),
  FOREIGN KEY (patient_id) REFERENCES patient(patient_id) ON DELETE CASCADE,
  FOREIGN KEY (parent_id) REFERENCES patient(patient_id) ON DELETE RESTRICT
);

-- Table pour les documents médicaux
CREATE TABLE documents_medicaux (
  document_id SERIAL PRIMARY KEY,
  patient_id int NOT NULL,
  type varchar(50) NOT NULL CHECK (type IN ('certificat_medical', 'attestation_aptitude', 'autre')),
  fichier_path varchar(255) NOT NULL,
  date_emission date NOT NULL,
  FOREIGN KEY (patient_id) REFERENCES patient(patient_id) ON DELETE CASCADE
);

-- Index pour optimiser les performances
CREATE INDEX idx_patient_nom ON patient(nom);
CREATE INDEX idx_consultation_date ON consultation(Date_Consultation);
CREATE INDEX idx_rendezvous_date ON rendezvous(date);
CREATE INDEX idx_logs_created_at ON logs(created_at);
CREATE INDEX idx_analyses_date ON Analyses(date);
CREATE INDEX idx_radiographie_date ON RadiographieEchographie(date);
CREATE INDEX idx_carnetconsultation_date ON carnetconsultation(date);
CREATE INDEX idx_facture_date_emission ON facture(date_emission);
CREATE INDEX idx_declarations_naissance_date ON declarations_naissance(date_declaration);
CREATE INDEX idx_conseils_sante_date ON conseils_sante(date_publication);ut
