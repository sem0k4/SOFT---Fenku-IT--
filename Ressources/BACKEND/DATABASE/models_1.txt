from django.db import models

class MinistereDeLaSante(models.Model):
    ministere_id = models.AutoField(primary_key=True)
    nom = models.CharField(max_length=255)

    class Meta:
        db_table = 'ministeredelasante'
        managed = False  # Défini à False car le schéma est créé via SQL

    def __str__(self):
        return self.nom

class Hopital(models.Model):
    hopital_id = models.AutoField(primary_key=True)
    nom = models.CharField(max_length=255)
    adresse = models.CharField(max_length=255)
    telephone = models.CharField(max_length=255)
    email = models.CharField(max_length=255)
    capacite = models.IntegerField()  # On suppose que la capacité est numérique
    services_offerts = models.TextField()  # TextField pour un texte potentiellement plus long
    ministere = models.ForeignKey(MinistereDeLaSante, on_delete=models.CASCADE)

    class Meta:
        db_table = 'hopital'
        managed = False

    def __str__(self):
        return self.nom

class Utilisateur(models.Model):
    user_id = models.AutoField(primary_key=True)
    login = models.CharField(max_length=255)
    password = models.CharField(max_length=255)  # Considérez le hachage en production
    ministere = models.ForeignKey(MinistereDeLaSante, on_delete=models.SET_NULL, null=True, blank=True)

    class Meta:
        db_table = 'utilisateur'
        managed = False

    def __str__(self):
        return self.login

class Medecin(models.Model):
    medecin_id = models.AutoField(primary_key=True)
    prenom = models.CharField(max_length=255)
    nom = models.CharField(max_length=255)
    telephone = models.CharField(max_length=255)
    email = models.CharField(max_length=255)
    hopital = models.ForeignKey(Hopital, on_delete=models.CASCADE)
    user = models.ForeignKey(Utilisateur, on_delete=models.SET_NULL, null=True, blank=True)

    class Meta:
        db_table = 'medecin'
        managed = False

    def __str__(self):
        return f"{self.prenom} {self.nom}"

class Patient(models.Model):
    patient_id = models.AutoField(primary_key=True)
    prenom = models.CharField(max_length=255)
    nom = models.CharField(max_length=255)
    date_naissance = models.DateField()
    adresse = models.CharField(max_length=255)
    telephone = models.CharField(max_length=255)
    email = models.CharField(max_length=255)
    user = models.ForeignKey(Utilisateur, on_delete=models.SET_NULL, null=True, blank=True)

    class Meta:
        db_table = 'patient'
        managed = False

    def __str__(self):
        return f"{self.prenom} {self.nom}"

class CapteurIoT(models.Model):
    capteur_id = models.AutoField(primary_key=True)
    patient = models.ForeignKey(Patient, on_delete=models.CASCADE)
    type = models.CharField(max_length=50)
    date_installation = models.DateField()
    statut = models.CharField(max_length=50)

    class Meta:
        db_table = 'capteuriot'
        managed = False

    def __str__(self):
        return f"{self.type} ({self.patient})"

class Consultation(models.Model):
    consultation_id = models.AutoField(primary_key=True)
    patient = models.ForeignKey(Patient, on_delete=models.CASCADE)
    capteur = models.ForeignKey(CapteurIoT, on_delete=models.CASCADE)
    valeur = models.IntegerField()
    medecin = models.ForeignKey(Medecin, on_delete=models.CASCADE)
    date_consultation = models.DateField()
    prescription = models.TextField(blank=True, null=True)
    diagnostic = models.TextField(blank=True, null=True)
    notes = models.TextField(blank=True, null=True)

    class Meta:
        db_table = 'consultation'
        managed = False

    def __str__(self):
        return f"Consultation {self.consultation_id} ({self.patient})"

class Ordonnance(models.Model):
    ordonnance_id = models.AutoField(primary_key=True)
    patient = models.ForeignKey(Patient, on_delete=models.CASCADE)
    medecin = models.ForeignKey(Medecin, on_delete=models.CASCADE)
    consultation = models.ForeignKey(Consultation, on_delete=models.CASCADE)
    date_ordonnance = models.DateField()

    class Meta:
        db_table = 'ordonnance'
        managed = False

    def __str__(self):
        return f"Ordonnance {self.ordonnance_id} ({self.patient})"

class Medicament(models.Model):
    medicaments_id = models.AutoField(primary_key=True)
    nom = models.TextField()
    posologie = models.TextField()

    class Meta:
        db_table = 'médicaments'
        managed = False

    def __str__(self):
        return self.nom

class LigneOrdonnance(models.Model):
    ligne_ordonnance_id = models.AutoField(primary_key=True)
    ordonnance = models.ForeignKey(Ordonnance, on_delete=models.CASCADE)
    medicament = models.ForeignKey(Medicament, on_delete=models.CASCADE)

    class Meta:
        db_table = 'LigneOrdonnance'
        managed = False

    def __str__(self):
        return f"Ligne {self.ligne_ordonnance_id} ({self.ordonnance})"

class Analyse(models.Model):
    analyse_id = models.AutoField(primary_key=True)
    patient = models.ForeignKey(Patient, on_delete=models.SET_NULL, null=True, blank=True)
    type_analyse = models.CharField(max_length=255)
    resultat = models.TextField()
    date = models.DateField()

    class Meta:
        db_table = 'Analyses'
        managed = False

    def __str__(self):
        return f"Analyse {self.analyse_id} ({self.type_analyse})"

class RadiographieEchographie(models.Model):
    image_id = models.AutoField(primary_key=True)
    patient = models.ForeignKey(Patient, on_delete=models.SET_NULL, null=True, blank=True)
    fichier_path = models.CharField(max_length=255)
    date = models.DateField()

    class Meta:
        db_table = 'RadiographieEchographie'
        managed = False

    def __str__(self):
        return f"Image {self.image_id}"

class Antecedent(models.Model):
    antecedent_id = models.AutoField(primary_key=True)
    patient = models.ForeignKey(Patient, on_delete=models.CASCADE)
    description = models.CharField(max_length=255)
    type = models.IntegerField()  # On suppose que le type est un code numérique

    class Meta:
        db_table = 'Antecedent'
        managed = False

    def __str__(self):
        return f"Antécédent {self.antecedent_id} ({self.patient})"

class Biometrie(models.Model):
    facture_id = models.AutoField(primary_key=True)
    patient = models.ForeignKey(Patient, on_delete=models.CASCADE)
    groupe_sanguin = models.CharField(max_length=255)
    poids = models.IntegerField()
    taille = models.CharField(max_length=255)  # On suppose que la taille est une chaîne (par ex., "1.75 m")

    class Meta:
        db_table = 'Biometrie'
        managed = False

    def __str__(self):
        return f"Biométrie {self.facture_id} ({self.patient})"

class CarnetConsultation(models.Model):
    carnet_id = models.AutoField(primary_key=True)
    patient = models.ForeignKey(Patient, on_delete=models.CASCADE)
    note = models.TextField()
    date = models.DateField()

    class Meta:
        db_table = 'carnetconsultation'
        managed = False

    def __str__(self):
        return f"Carnet {self.carnet_id} ({self.patient})"

class Facture(models.Model):
    facture_id = models.AutoField(primary_key=True)
    patient = models.ForeignKey(Patient, on_delete=models.CASCADE)
    montant = models.DecimalField(max_digits=10, decimal_places=2)
    date_emission = models.DateField()

    class Meta:
        db_table = 'facture'
        managed = False

    def __str__(self):
        return f"Facture {self.facture_id} ({self.patient})"

class RendezVous(models.Model):
    rdv_id = models.AutoField(primary_key=True)
    patient = models.ForeignKey(Patient, on_delete=models.CASCADE)
    medecin = models.ForeignKey(Medecin, on_delete=models.CASCADE)
    date = models.DateField()
    statut = models.CharField(max_length=50, null=True, blank=True)

    class Meta:
        db_table = 'rendezvous'
        managed = False

    def __str__(self):
        return f"RDV {self.rdv_id} ({self.patient})"

class Log(models.Model):
    log_id = models.AutoField(primary_key=True)
    user = models.ForeignKey(Utilisateur, on_delete=models.CASCADE)
    action = models.CharField(max_length=255)
    created_at = models.DateTimeField(auto_now_add=True)

    class Meta:
        db_table = 'logs'
        managed = False

    def __str__(self):
        return f"Log {self.log_id} ({self.action})"

class Salle(models.Model):
    salle_id = models.AutoField(primary_key=True)
    hopital = models.ForeignKey(Hopital, on_delete=models.CASCADE)
    nom = models.CharField(max_length=255)

    class Meta:
        db_table = 'salle'
        managed = False

    def __str__(self):
        return f"{self.nom} ({self.hopital})"

class Lit(models.Model):
    lit_id = models.AutoField(primary_key=True)
    salle = models.ForeignKey(Salle, on_delete=models.CASCADE)
    numero = models.IntegerField()

    class Meta:
        db_table = 'lit'
        managed = False

    def __str__(self):
        return f"Lit {self.numero} ({self.salle})"

class Hospitalisation(models.Model):
    hospitalisation_id = models.AutoField(primary_key=True)
    patient = models.ForeignKey(Patient, on_delete=models.CASCADE)
    lit = models.ForeignKey(Lit, on_delete=models.CASCADE)
    date_debut = models.DateField()
    date_fin = models.DateField(null=True, blank=True)
    motif = models.TextField(blank=True, null=True)

    class Meta:
        db_table = 'hospitalisation'
        managed = False

    def __str__(self):
        return f"Hospitalisation {self.hospitalisation_id} ({self.patient})"

class Ambulance(models.Model):
    ambulance_id = models.AutoField(primary_key=True)
    hopital = models.ForeignKey(Hopital, on_delete=models.CASCADE)
    immatriculation = models.CharField(max_length=20)

    class Meta:
        db_table = 'ambulance'
        managed = False

    def __str__(self):
        return f"Ambulance {self.immatriculation} ({self.hopital})"

class ServiceAccueil(models.Model):
    service_id = models.AutoField(primary_key=True)
    hopital = models.ForeignKey(Hopital, on_delete=models.CASCADE)
    nom = models.CharField(max_length=255)

    class Meta:
        db_table = 'serviceaccueil'
        managed = False

    def __str__(self):
        return f"{self.nom} ({self.hopital})"
