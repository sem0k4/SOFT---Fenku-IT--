// Service pour le chatbot m√©dical Fajma - Version am√©lior√©e
class ChatbotService {
  constructor() {
    this.conversationHistory = [];
    this.userContext = {};
    this.responseCache = new Map();
    this.typingSpeed = 30; // caract√®res par seconde
    
    this.medicalDatabase = {
      symptoms: {
        'fi√®vre': {
          description: 'Temp√©rature corporelle √©lev√©e (>37.5¬∞C)',
          advice: 'Reposez-vous, buvez beaucoup d\'eau, prenez du parac√©tamol si n√©cessaire. Consultez un m√©decin si la fi√®vre persiste plus de 3 jours.',
          urgency: 'moderate',
          keywords: ['fi√®vre', 'temp√©rature', 'chaud', 'br√ªlant', 'hyperthermie', 'thermique'],
          followUp: ['Depuis combien de temps avez-vous de la fi√®vre ?', 'Avez-vous d\'autres sympt√¥mes ?', 'Quelle est votre temp√©rature ?'],
          relatedSymptoms: ['frissons', 'sueurs', 'fatigue', 'maux de t√™te']
        },
        'toux': {
          description: 'R√©flexe de toux pour expulser les s√©cr√©tions',
          advice: 'Buvez beaucoup d\'eau, utilisez des pastilles pour la gorge. Consultez si la toux persiste plus d\'une semaine.',
          urgency: 'low',
          keywords: ['toux', 'tousser', 'gorge', 'irritation']
        },
        'douleur thoracique': {
          description: 'Douleur dans la r√©gion du thorax',
          advice: 'URGENCE M√âDICALE - Appelez imm√©diatement les secours (15) ou rendez-vous aux urgences.',
          urgency: 'high',
          keywords: ['douleur thoracique', 'poitrine', 'c≈ìur', 'oppression']
        },
        'essoufflement': {
          description: 'Difficult√© √† respirer normalement',
          advice: 'URGENCE M√âDICALE - Consultez imm√©diatement un m√©decin ou appelez les secours.',
          urgency: 'high',
          keywords: ['essoufflement', 'respiration', 'souffle', 'haletant']
        },
        'naus√©e': {
          description: 'Sensation de mal-√™tre avec envie de vomir',
          advice: 'Reposez-vous, √©vitez les aliments gras. Consultez si les naus√©es persistent plus de 24h.',
          urgency: 'moderate',
          keywords: ['naus√©e', 'naus√©es', 'mal au c≈ìur', 'vomir']
        },
        'maux de t√™te': {
          description: 'Douleur dans la r√©gion cr√¢nienne',
          advice: 'Reposez-vous dans un endroit calme, prenez du parac√©tamol. Consultez si les maux de t√™te sont intenses ou persistants.',
          urgency: 'moderate',
          keywords: ['maux de t√™te', 'c√©phal√©e', 'mal √† la t√™te', 'migraine']
        },
        'douleur abdominale': {
          description: 'Douleur dans la r√©gion de l\'abdomen',
          advice: '√âvitez de manger, buvez de l\'eau. Consultez un m√©decin si la douleur est intense ou persistante.',
          urgency: 'moderate',
          keywords: ['douleur abdominale', 'ventre', 'estomac', 'crampes']
        },
        'vertiges': {
          description: 'Sensation de perte d\'√©quilibre',
          advice: 'Asseyez-vous ou allongez-vous, √©vitez les mouvements brusques. Consultez si les vertiges persistent.',
          urgency: 'moderate',
          keywords: ['vertiges', '√©tourdissement', 'tournis', '√©quilibre']
        }
      },
      medications: {
        'parac√©tamol': {
          description: 'Analg√©sique et antipyr√©tique',
          dosage: '1g toutes les 6-8h',
          maxDaily: '4g par jour',
          sideEffects: 'Rare, peut causer des r√©actions allergiques',
          interactions: '√âviter avec l\'alcool en exc√®s'
        },
        'ibuprof√®ne': {
          description: 'Anti-inflammatoire non st√©ro√Ødien',
          dosage: '400mg toutes les 6-8h',
          maxDaily: '2.4g par jour',
          sideEffects: 'Peut causer des troubles digestifs',
          interactions: '√Ä prendre avec de la nourriture'
        },
        'aspirine': {
          description: 'Anti-inflammatoire et anticoagulant',
          dosage: '500mg toutes les 4-6h',
          maxDaily: '4g par jour',
          sideEffects: 'Risque de saignement, troubles digestifs',
          interactions: 'Attention aux interactions m√©dicamenteuses'
        },
        'vitamine c': {
          description: 'Compl√©ment vitaminique',
          dosage: '500-1000mg par jour',
          maxDaily: '2g par jour',
          sideEffects: 'Diarrh√©e en cas de surdosage',
          interactions: 'Peut interf√©rer avec certains traitements'
        }
      },
      emergencies: [
        'douleur thoracique',
        'essoufflement',
        'perte de conscience',
        'h√©morragie',
        'traumatisme cr√¢nien',
        'br√ªlure grave',
        'intoxication',
        'crise cardiaque',
        'accident vasculaire c√©r√©bral'
      ],
      generalAdvice: {
        'pr√©vention': [
          'Lavez-vous les mains r√©guli√®rement',
          'Mangez √©quilibr√© et vari√©',
          'Faites de l\'exercice r√©guli√®rement',
          'Dormez suffisamment (7-8h)',
          '√âvitez le tabac et l\'alcool excessif'
        ],
        'hygi√®ne': [
          'Lavez-vous les mains avant de manger',
          'Couvez-vous la bouche en toussant',
          'A√©rez votre domicile quotidiennement',
          'Changez r√©guli√®rement vos draps',
          'Nettoyez vos surfaces de contact'
        ],
        'alimentation': [
          'Mangez 5 fruits et l√©gumes par jour',
          'Buvez 1.5L d\'eau par jour',
          'Limitez le sucre et le sel',
          'Privil√©giez les c√©r√©ales compl√®tes',
          '√âvitez les aliments transform√©s'
        ]
      }
    };
  }

  // Analyser le message de l'utilisateur avec intelligence am√©lior√©e
  analyzeMessage(message, userId = null) {
    const lowerMessage = message.toLowerCase();
    const messageId = this.generateMessageId(message);
    
    // V√©rifier le cache pour les r√©ponses fr√©quentes
    if (this.responseCache.has(messageId)) {
      const cachedResponse = this.responseCache.get(messageId);
      this.addToHistory(message, cachedResponse, userId);
      return cachedResponse;
    }

    // Analyser le contexte de la conversation
    const context = this.analyzeContext(lowerMessage);
    
    // D√©tecter les urgences en premier (priorit√© maximale)
    const emergency = this.detectEmergency(lowerMessage);
    if (emergency) {
      const response = this.generateEmergencyResponse(emergency);
      this.cacheResponse(messageId, response);
      this.addToHistory(message, response, userId);
      return response;
    }

    // D√©tecter les sympt√¥mes avec contexte
    const symptom = this.detectSymptom(lowerMessage);
    if (symptom) {
      const response = this.generateSymptomResponse(symptom, context);
      this.cacheResponse(messageId, response);
      this.addToHistory(message, response, userId);
      return response;
    }

    // D√©tecter les m√©dicaments
    const medication = this.detectMedication(lowerMessage);
    if (medication) {
      const response = this.generateMedicationResponse(medication, context);
      this.cacheResponse(messageId, response);
      this.addToHistory(message, response, userId);
      return response;
    }

    // D√©tecter les questions g√©n√©rales
    const general = this.detectGeneralQuestion(lowerMessage);
    if (general) {
      const response = this.generateGeneralResponse(general, lowerMessage, context);
      this.cacheResponse(messageId, response);
      this.addToHistory(message, response, userId);
      return response;
    }

    // R√©ponse contextuelle intelligente
    const response = this.generateContextualResponse(lowerMessage, context);
    this.cacheResponse(messageId, response);
    this.addToHistory(message, response, userId);
    return response;
  }

  // D√©tecter les urgences
  detectEmergency(message) {
    for (const emergency of this.medicalDatabase.emergencies) {
      if (message.includes(emergency)) {
        return emergency;
      }
    }
    return null;
  }

  // D√©tecter les sympt√¥mes
  detectSymptom(message) {
    for (const [symptom, data] of Object.entries(this.medicalDatabase.symptoms)) {
      for (const keyword of data.keywords) {
        if (message.includes(keyword)) {
          return { symptom, ...data };
        }
      }
    }
    return null;
  }

  // D√©tecter les m√©dicaments
  detectMedication(message) {
    for (const [medication, data] of Object.entries(this.medicalDatabase.medications)) {
      if (message.includes(medication)) {
        return { medication, ...data };
      }
    }
    return null;
  }

  // D√©tecter les questions g√©n√©rales
  detectGeneralQuestion(message) {
    const generalKeywords = {
      'pr√©vention': ['pr√©venir', '√©viter', 'pr√©vention', 'pr√©caution'],
      'hygi√®ne': ['hygi√®ne', 'propre', 'nettoyer', 'laver'],
      'alimentation': ['manger', 'aliment', 'nutrition', 'r√©gime'],
      'sant√©': ['sant√©', 'm√©dical', 'docteur', 'm√©decin'],
      'conseil': ['conseil', 'aide', 'suggestion', 'recommandation']
    };

    for (const [category, keywords] of Object.entries(generalKeywords)) {
      for (const keyword of keywords) {
        if (message.includes(keyword)) {
          return category;
        }
      }
    }
    return null;
  }

  // G√©n√©rer les r√©ponses
  generateEmergencyResponse(emergency) {
    return {
      type: 'emergency',
      text: `üö® URGENCE M√âDICALE D√âTECT√âE üö®\n\nSympt√¥me: ${emergency}\n\nVeuillez imm√©diatement :\n‚Ä¢ Appeler le 15 (SAMU)\n‚Ä¢ Ou vous rendre aux urgences les plus proches\n‚Ä¢ Ne restez pas seul(e)\n\nJe vous conseille de consulter un professionnel de sant√© imm√©diatement.`,
      urgency: 'high',
      suggestions: [
        'Appeler le 15',
        'Trouver les urgences proches',
        'Contacter un m√©decin',
        'Autres urgences'
      ]
    };
  }

  generateSymptomResponse(symptomData) {
    const urgencyIcons = {
      high: 'üö®',
      moderate: '‚ö†Ô∏è',
      low: '‚ÑπÔ∏è'
    };

    return {
      type: 'symptom',
      text: `${urgencyIcons[symptomData.urgency]} Sympt√¥me d√©tect√©: ${symptomData.symptom}\n\nDescription: ${symptomData.description}\n\nConseil: ${symptomData.advice}`,
      urgency: symptomData.urgency,
      suggestions: [
        'Prendre rendez-vous avec un m√©decin',
        'Appeler les urgences',
        'Consulter un pharmacien',
        'Autres questions'
      ]
    };
  }

  generateMedicationResponse(medicationData) {
    return {
      type: 'medication',
      text: `üíä Information sur ${medicationData.medication}:\n\nDescription: ${medicationData.description}\n\nPosologie: ${medicationData.dosage}\n\nMaximum par jour: ${medicationData.maxDaily}\n\nEffets secondaires: ${medicationData.sideEffects}\n\nInteractions: ${medicationData.interactions}`,
      suggestions: [
        'Posologie recommand√©e',
        'Effets secondaires',
        'Interactions m√©dicamenteuses',
        'Autres questions'
      ]
    };
  }

  generateGeneralResponse(category, message) {
    const responses = {
      'pr√©vention': {
        text: 'üõ°Ô∏è Conseils de pr√©vention :\n\n' + this.medicalDatabase.generalAdvice.pr√©vention.map(advice => `‚Ä¢ ${advice}`).join('\n'),
        suggestions: ['Hygi√®ne', 'Alimentation', 'Exercice', 'Autres conseils']
      },
      'hygi√®ne': {
        text: 'üßº Conseils d\'hygi√®ne :\n\n' + this.medicalDatabase.generalAdvice.hygi√®ne.map(advice => `‚Ä¢ ${advice}`).join('\n'),
        suggestions: ['Pr√©vention', 'Alimentation', 'Exercice', 'Autres conseils']
      },
      'alimentation': {
        text: 'ü•ó Conseils alimentaires :\n\n' + this.medicalDatabase.generalAdvice.alimentation.map(advice => `‚Ä¢ ${advice}`).join('\n'),
        suggestions: ['Pr√©vention', 'Hygi√®ne', 'Exercice', 'Autres conseils']
      },
      'sant√©': {
        text: 'üè• Je suis l√† pour vous aider avec vos questions de sant√©. Vous pouvez me demander des informations sur vos sympt√¥mes, m√©dicaments, ou toute autre question m√©dicale.',
        suggestions: ['D√©crire mes sympt√¥mes', 'Questions sur mes m√©dicaments', 'Conseils de pr√©vention', 'Autres questions']
      },
      'conseil': {
        text: 'üí° Je peux vous donner des conseils sur la pr√©vention, l\'hygi√®ne, l\'alimentation, et r√©pondre √† vos questions m√©dicales. Que souhaitez-vous savoir ?',
        suggestions: ['Pr√©vention', 'Hygi√®ne', 'Alimentation', 'Sympt√¥mes']
      }
    };

    return {
      type: 'general',
      ...responses[category]
    };
  }

  generateDefaultResponse() {
    return {
      type: 'default',
      text: 'Je comprends votre question. Pour mieux vous aider, pourriez-vous me donner plus de d√©tails sur vos sympt√¥mes ou votre pr√©occupation m√©dicale ?',
      suggestions: [
        'D√©crire mes sympt√¥mes',
        'Questions sur mes m√©dicaments',
        'Conseils de pr√©vention',
        'Prendre rendez-vous'
      ]
    };
  }

  // Obtenir des suggestions contextuelles
  getContextualSuggestions(lastMessage) {
    const suggestions = {
      'symptom': [
        'Quels sont les autres sympt√¥mes ?',
        'Depuis combien de temps ?',
        'L\'intensit√© est-elle forte ?',
        'Avez-vous pris des m√©dicaments ?'
      ],
      'medication': [
        'Quelle est la posologie ?',
        'Y a-t-il des effets secondaires ?',
        'Puis-je prendre d\'autres m√©dicaments ?',
        'Quand dois-je consulter ?'
      ],
      'general': [
        'Conseils de pr√©vention',
        'Questions sur l\'hygi√®ne',
        'Conseils alimentaires',
        'Autres questions m√©dicales'
      ]
    };

    return suggestions[lastMessage?.type] || suggestions.general;
  }

  // V√©rifier si c'est une urgence
  isEmergency(message) {
    return this.detectEmergency(message.toLowerCase()) !== null;
  }

  // Obtenir des conseils de pr√©vention
  getPreventionAdvice() {
    return this.medicalDatabase.generalAdvice.pr√©vention;
  }

  // Obtenir des conseils d'hygi√®ne
  getHygieneAdvice() {
    return this.medicalDatabase.generalAdvice.hygi√®ne;
  }

  // Obtenir des conseils alimentaires
  getNutritionAdvice() {
    return this.medicalDatabase.generalAdvice.alimentation;
  }

  // === M√âTHODES AVANC√âES POUR AM√âLIORER LES PERFORMANCES ===

  // G√©n√©rer un ID unique pour le message
  generateMessageId(message) {
    return btoa(message.toLowerCase().replace(/\s+/g, '')).substring(0, 16);
  }

  // Analyser le contexte de la conversation
  analyzeContext(message) {
    const context = {
      hasPreviousSymptoms: this.hasPreviousSymptoms(),
      lastSymptom: this.getLastSymptom(),
      conversationLength: this.conversationHistory.length,
      timeOfDay: new Date().getHours(),
      urgencyLevel: this.getCurrentUrgencyLevel(),
      userMood: this.detectUserMood(message)
    };
    return context;
  }

  // V√©rifier s'il y a des sympt√¥mes pr√©c√©dents
  hasPreviousSymptoms() {
    return this.conversationHistory.some(msg => 
      msg.response && msg.response.type === 'symptom'
    );
  }

  // Obtenir le dernier sympt√¥me mentionn√©
  getLastSymptom() {
    const lastSymptomMessage = this.conversationHistory
      .reverse()
      .find(msg => msg.response && msg.response.type === 'symptom');
    return lastSymptomMessage ? lastSymptomMessage.response.symptom : null;
  }

  // Obtenir le niveau d'urgence actuel
  getCurrentUrgencyLevel() {
    const lastMessage = this.conversationHistory[this.conversationHistory.length - 1];
    return lastMessage?.response?.urgency || 'low';
  }

  // D√©tecter l'humeur de l'utilisateur
  detectUserMood(message) {
    const urgentWords = ['urgent', 'grave', 's√©rieux', 'imm√©diat', 'rapide'];
    const calmWords = ['ok', 'bien', 'merci', 'd\'accord', 'compris'];
    const worriedWords = ['inquiet', 'peur', 'anxieux', 'stress√©', 'panique'];

    if (urgentWords.some(word => message.includes(word))) return 'urgent';
    if (worriedWords.some(word => message.includes(word))) return 'worried';
    if (calmWords.some(word => message.includes(word))) return 'calm';
    return 'neutral';
  }

  // Ajouter √† l'historique de conversation
  addToHistory(message, response, userId) {
    this.conversationHistory.push({
      timestamp: new Date(),
      userId,
      message,
      response,
      messageId: this.generateMessageId(message)
    });

    // Limiter l'historique √† 50 messages pour les performances
    if (this.conversationHistory.length > 50) {
      this.conversationHistory = this.conversationHistory.slice(-50);
    }
  }

  // Mettre en cache la r√©ponse
  cacheResponse(messageId, response) {
    this.responseCache.set(messageId, response);
    
    // Limiter le cache √† 100 r√©ponses
    if (this.responseCache.size > 100) {
      const firstKey = this.responseCache.keys().next().value;
      this.responseCache.delete(firstKey);
    }
  }

  // G√©n√©rer une r√©ponse contextuelle intelligente
  generateContextualResponse(message, context) {
    // Analyser les mots-cl√©s pour une meilleure compr√©hension
    const keywords = this.extractKeywords(message);
    const sentiment = this.analyzeSentiment(message);
    
    // R√©ponse personnalis√©e bas√©e sur le contexte
    if (context.hasPreviousSymptoms) {
      return this.generateFollowUpResponse(message, context);
    }

    if (sentiment === 'urgent') {
      return {
        type: 'urgent_clarification',
        text: 'Je comprends que c\'est urgent. Pouvez-vous me donner plus de d√©tails sur vos sympt√¥mes pour que je puisse mieux vous aider ?',
        urgency: 'high',
        suggestions: [
          'D√©crire mes sympt√¥mes',
          'Appeler les urgences',
          'Consulter un m√©decin',
          'Autres questions'
        ]
      };
    }

    // R√©ponse par d√©faut am√©lior√©e
    return {
      type: 'default',
      text: 'Je comprends votre question. Pour mieux vous aider, pourriez-vous me donner plus de d√©tails sur vos sympt√¥mes ou votre pr√©occupation m√©dicale ?',
      suggestions: [
        'D√©crire mes sympt√¥mes',
        'Questions sur mes m√©dicaments',
        'Conseils de pr√©vention',
        'Prendre rendez-vous'
      ]
    };
  }

  // Extraire les mots-cl√©s importants
  extractKeywords(message) {
    const medicalTerms = [
      'douleur', 'fi√®vre', 'toux', 'naus√©e', 'vomissement', 'diarrh√©e',
      'fatigue', 'vertiges', 'maux de t√™te', 'essoufflement', 'palpitations'
    ];
    
    return medicalTerms.filter(term => message.includes(term));
  }

  // Analyser le sentiment du message
  analyzeSentiment(message) {
    const urgentPatterns = /urgent|grave|s√©rieux|imm√©diat|rapide|dangereux/i;
    const worriedPatterns = /inquiet|peur|anxieux|stress√©|panique|peur/i;
    const calmPatterns = /ok|bien|merci|d'accord|compris|calme/i;

    if (urgentPatterns.test(message)) return 'urgent';
    if (worriedPatterns.test(message)) return 'worried';
    if (calmPatterns.test(message)) return 'calm';
    return 'neutral';
  }

  // G√©n√©rer une r√©ponse de suivi
  generateFollowUpResponse(message, context) {
    const lastSymptom = context.lastSymptom;
    
    return {
      type: 'follow_up',
      text: `Je vois que nous parlions de ${lastSymptom}. Avez-vous d'autres sympt√¥mes ou des questions sp√©cifiques ?`,
      urgency: context.urgencyLevel,
      suggestions: [
        'D√©crire d\'autres sympt√¥mes',
        'Poser une question sp√©cifique',
        'Consulter un m√©decin',
        'Autres questions'
      ]
    };
  }

  // Calculer le temps de frappe r√©aliste
  calculateTypingTime(text) {
    const charCount = text.length;
    const baseTime = charCount / this.typingSpeed;
    const randomDelay = Math.random() * 0.5; // Ajouter un d√©lai al√©atoire
    return Math.max(1000, (baseTime + randomDelay) * 1000); // Minimum 1 seconde
  }

  // Obtenir l'historique de conversation
  getConversationHistory(userId = null) {
    if (userId) {
      return this.conversationHistory.filter(msg => msg.userId === userId);
    }
    return this.conversationHistory;
  }

  // Effacer l'historique
  clearHistory(userId = null) {
    if (userId) {
      this.conversationHistory = this.conversationHistory.filter(msg => msg.userId !== userId);
    } else {
      this.conversationHistory = [];
    }
  }

  // Obtenir des statistiques de performance
  getPerformanceStats() {
    return {
      totalMessages: this.conversationHistory.length,
      cacheSize: this.responseCache.size,
      averageResponseTime: this.calculateAverageResponseTime(),
      mostCommonSymptoms: this.getMostCommonSymptoms()
    };
  }

  // Calculer le temps de r√©ponse moyen
  calculateAverageResponseTime() {
    // Simulation - dans une vraie app, on mesurerait le temps r√©el
    return 1.2; // secondes
  }

  // Obtenir les sympt√¥mes les plus courants
  getMostCommonSymptoms() {
    const symptomCounts = {};
    this.conversationHistory.forEach(msg => {
      if (msg.response && msg.response.type === 'symptom') {
        const symptom = msg.response.symptom;
        symptomCounts[symptom] = (symptomCounts[symptom] || 0) + 1;
      }
    });
    
    return Object.entries(symptomCounts)
      .sort(([,a], [,b]) => b - a)
      .slice(0, 5)
      .map(([symptom, count]) => ({ symptom, count }));
  }
}

export default new ChatbotService();
