# =============================================================================
# FAJMA IoT Healthcare System - Pre-commit Configuration
# =============================================================================

repos:
  # =============================================================================
  # GENERAL HOOKS
  # =============================================================================
  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v4.4.0
    hooks:
      # File formatting
      - id: trailing-whitespace
        args: [--markdown-linebreak-ext=md]
      - id: end-of-file-fixer
      - id: mixed-line-ending
        args: [--fix=lf]
      
      # JSON/YAML validation
      - id: check-json
      - id: check-yaml
        args: [--allow-multiple-documents]
      - id: check-toml
      
      # Security
      - id: check-added-large-files
        args: [--maxkb=1000]
      - id: check-merge-conflict
      - id: detect-private-key
      - id: detect-aws-credentials
        args: [--allow-missing-credentials]
      
      # Code quality
      - id: check-ast
      - id: check-builtin-literals
      - id: check-case-conflict
      - id: check-docstring-first
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: debug-statements
      - id: name-tests-test
        args: [--pytest-test-first]
      
      # File organization
      - id: sort-simple-yaml
        files: .pre-commit-config.yaml

  # =============================================================================
  # PYTHON/DJANGO HOOKS
  # =============================================================================
  
  # Black - Python code formatter
  - repo: https://github.com/psf/black
    rev: 23.3.0
    hooks:
      - id: black
        language_version: python3
        files: ^backend/
        args: [--line-length=88, --target-version=py39]
  
  # isort - Import sorting
  - repo: https://github.com/pycqa/isort
    rev: 5.12.0
    hooks:
      - id: isort
        files: ^backend/
        args: [--profile=black, --line-length=88]
  
  # flake8 - Python linting
  - repo: https://github.com/pycqa/flake8
    rev: 6.0.0
    hooks:
      - id: flake8
        files: ^backend/
        args: [
          --max-line-length=88,
          --extend-ignore=E203,W503,E501,
          --max-complexity=10
        ]
        additional_dependencies: [
          flake8-docstrings,
          flake8-import-order,
          flake8-bugbear,
          flake8-comprehensions,
          flake8-simplify,
          flake8-bandit,
        ]
  
  # mypy - Static type checking
  - repo: https://github.com/pre-commit/mirrors-mypy
    rev: v1.3.0
    hooks:
      - id: mypy
        files: ^backend/
        args: [--ignore-missing-imports, --no-strict-optional]
        additional_dependencies: [
          django-stubs,
          djangorestframework-stubs,
          types-redis,
          types-requests,
        ]
  
  # bandit - Security linting
  - repo: https://github.com/pycqa/bandit
    rev: 1.7.5
    hooks:
      - id: bandit
        files: ^backend/
        args: [-r, -f, json, -o, bandit-report.json]
        exclude: ^backend/tests/
  
  # safety - Dependency vulnerability check
  - repo: https://github.com/Lucas-C/pre-commit-hooks-safety
    rev: v1.3.2
    hooks:
      - id: python-safety-dependencies-check
        files: ^backend/requirements.*\.txt$
  
  # Django specific checks
  - repo: local
    hooks:
      - id: django-check
        name: Django Check
        entry: bash -c 'cd backend && python manage.py check'
        language: system
        files: ^backend/
        types: [python]
        pass_filenames: false
      
      - id: django-check-migrations
        name: Django Check Migrations
        entry: bash -c 'cd backend && python manage.py makemigrations --check --dry-run'
        language: system
        files: ^backend/.*models\.py$
        pass_filenames: false

  # =============================================================================
  # JAVASCRIPT/TYPESCRIPT/REACT HOOKS
  # =============================================================================
  
  # Prettier - Code formatter
  - repo: https://github.com/pre-commit/mirrors-prettier
    rev: v3.0.0
    hooks:
      - id: prettier
        files: ^frontend/
        types_or: [javascript, jsx, ts, tsx, json, css, scss, markdown, yaml]
        args: [--config, frontend/.prettierrc]
  
  # ESLint - JavaScript/TypeScript linting
  - repo: https://github.com/pre-commit/mirrors-eslint
    rev: v8.44.0
    hooks:
      - id: eslint
        files: ^frontend/.*\.(js|jsx|ts|tsx)$
        args: [--config, frontend/.eslintrc.js, --fix]
        additional_dependencies: [
          '@typescript-eslint/eslint-plugin@^5.59.0',
          '@typescript-eslint/parser@^5.59.0',
          'eslint-config-prettier@^8.8.0',
          'eslint-plugin-import@^2.27.5',
          'eslint-plugin-jsx-a11y@^6.7.1',
          'eslint-plugin-react@^7.32.2',
          'eslint-plugin-react-hooks@^4.6.0',
          'eslint-plugin-react-refresh@^0.4.1',
          'eslint-plugin-security@^1.7.1',
          'eslint-plugin-sonarjs@^0.19.0',
        ]
  
  # TypeScript type checking
  - repo: local
    hooks:
      - id: typescript-check
        name: TypeScript Check
        entry: bash -c 'cd frontend && npm run type-check'
        language: system
        files: ^frontend/.*\.(ts|tsx)$
        pass_filenames: false
  
  # Frontend tests
  - repo: local
    hooks:
      - id: frontend-tests
        name: Frontend Tests
        entry: bash -c 'cd frontend && npm run test:ci'
        language: system
        files: ^frontend/
        pass_filenames: false
        stages: [push]

  # =============================================================================
  # DOCKER HOOKS
  # =============================================================================
  
  # Dockerfile linting
  - repo: https://github.com/hadolint/hadolint
    rev: v2.12.0
    hooks:
      - id: hadolint-docker
        args: [--ignore, DL3008, --ignore, DL3009, --ignore, DL3015]

  # =============================================================================
  # SECURITY HOOKS
  # =============================================================================
  
  # Secrets detection
  - repo: https://github.com/Yelp/detect-secrets
    rev: v1.4.0
    hooks:
      - id: detect-secrets
        args: [--baseline, .secrets.baseline]
        exclude: .*\.lock$|^frontend/package-lock\.json$
  
  # Git secrets
  - repo: https://github.com/gitguardian/ggshield
    rev: v1.18.0
    hooks:
      - id: ggshield
        language: python
        stages: [commit]

  # =============================================================================
  # DOCUMENTATION HOOKS
  # =============================================================================
  
  # Markdown linting
  - repo: https://github.com/igorshubovych/markdownlint-cli
    rev: v0.35.0
    hooks:
      - id: markdownlint
        args: [--fix, --config, .markdownlint.json]
  
  # Spell checking
  - repo: https://github.com/crate-ci/typos
    rev: v1.15.0
    hooks:
      - id: typos
        args: [--config, .typos.toml]

  # =============================================================================
  # COMMIT MESSAGE HOOKS
  # =============================================================================
  
  # Conventional commits
  - repo: https://github.com/compilerla/conventional-pre-commit
    rev: v2.3.0
    hooks:
      - id: conventional-pre-commit
        stages: [commit-msg]
        args: [--strict, --force-scope]

# =============================================================================
# CONFIGURATION
# =============================================================================

default_stages: [commit]
fail_fast: false
minimum_pre_commit_version: '2.20.0'

# CI configuration
ci:
  autofix_commit_msg: |
    [pre-commit.ci] auto fixes from pre-commit.com hooks
    
    for more information, see https://pre-commit.ci
  autofix_prs: true
  autoupdate_branch: ''
  autoupdate_commit_msg: '[pre-commit.ci] pre-commit autoupdate'
  autoupdate_schedule: weekly
  skip: []
  submodules: false