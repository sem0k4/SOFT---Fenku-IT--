# =============================================================================
# FAJMA IoT Healthcare System - Docker Compose Development
# =============================================================================

version: '3.8'

services:
  # =============================================================================
  # DATABASE SERVICES
  # =============================================================================
  
  postgres:
    image: postgres:15-alpine
    container_name: fajma_postgres_dev
    restart: unless-stopped
    environment:
      POSTGRES_DB: fajma_db
      POSTGRES_USER: fajma_user
      POSTGRES_PASSWORD: fajma_password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8 --lc-collate=C --lc-ctype=C"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - fajma_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U fajma_user -d fajma_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:7-alpine
    container_name: fajma_redis_dev
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redis_password
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    ports:
      - "6379:6379"
    networks:
      - fajma_network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "redis_password", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # =============================================================================
  # MESSAGE BROKER
  # =============================================================================
  
  mosquitto:
    image: eclipse-mosquitto:2.0
    container_name: fajma_mqtt_dev
    restart: unless-stopped
    volumes:
      - ./mqtt/mosquitto.conf:/mosquitto/config/mosquitto.conf:ro
      - ./mqtt/passwd:/mosquitto/config/passwd:ro
      - mosquitto_data:/mosquitto/data
      - mosquitto_logs:/mosquitto/log
    ports:
      - "1883:1883"
      - "9001:9001"
    networks:
      - fajma_network
    healthcheck:
      test: ["CMD-SHELL", "mosquitto_pub -h localhost -t test -m 'health check' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s

  # =============================================================================
  # BACKEND SERVICES
  # =============================================================================
  
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: fajma_backend_dev
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings.development
      - DJANGO_DEBUG=True
      - DJANGO_SECRET_KEY=dev-secret-key-change-in-production
      - DATABASE_URL=postgresql://fajma_user:fajma_password@postgres:5432/fajma_db
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - MQTT_BROKER_HOST=mosquitto
      - MQTT_BROKER_PORT=1883
      - MQTT_USERNAME=fajma_mqtt
      - MQTT_PASSWORD=mqtt_password
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379/2
      - EMAIL_BACKEND=django.core.mail.backends.console.EmailBackend
      - CORS_ALLOWED_ORIGINS=http://localhost:3000,http://localhost:5173
      - ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0,backend
    volumes:
      - ./backend:/app
      - backend_static:/app/staticfiles
      - backend_media:/app/media
      - backend_logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - fajma_network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mosquitto:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: >
      sh -c "
        python manage.py wait_for_db &&
        python manage.py migrate &&
        python manage.py collectstatic --noinput &&
        python manage.py runserver 0.0.0.0:8000
      "

  celery:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: fajma_celery_dev
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings.development
      - DATABASE_URL=postgresql://fajma_user:fajma_password@postgres:5432/fajma_db
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379/2
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    networks:
      - fajma_network
    depends_on:
      - postgres
      - redis
      - backend
    command: celery -A core worker -l info --concurrency=2

  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: fajma_celery_beat_dev
    restart: unless-stopped
    environment:
      - DJANGO_SETTINGS_MODULE=core.settings.development
      - DATABASE_URL=postgresql://fajma_user:fajma_password@postgres:5432/fajma_db
      - REDIS_URL=redis://:redis_password@redis:6379/0
      - CELERY_BROKER_URL=redis://:redis_password@redis:6379/1
      - CELERY_RESULT_BACKEND=redis://:redis_password@redis:6379/2
    volumes:
      - ./backend:/app
      - backend_logs:/app/logs
    networks:
      - fajma_network
    depends_on:
      - postgres
      - redis
      - backend
    command: celery -A core beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler

  # =============================================================================
  # FRONTEND SERVICES
  # =============================================================================
  
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: fajma_frontend_dev
    restart: unless-stopped
    environment:
      - NODE_ENV=development
      - VITE_API_BASE_URL=http://localhost:8000/api
      - VITE_WS_BASE_URL=ws://localhost:8000/ws
      - VITE_MQTT_WS_URL=ws://localhost:9001
      - VITE_ENABLE_VIDEO_CALLS=true
      - VITE_ENABLE_CHAT=true
      - VITE_ENABLE_IOT_MONITORING=true
      - VITE_DEBUG=true
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:5173"
    networks:
      - fajma_network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5173"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    command: npm run dev -- --host 0.0.0.0 --port 5173

  # =============================================================================
  # MONITORING SERVICES
  # =============================================================================
  
  prometheus:
    image: prom/prometheus:latest
    container_name: fajma_prometheus_dev
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - fajma_network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  grafana:
    image: grafana/grafana:latest
    container_name: fajma_grafana_dev
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-clock-panel,grafana-simple-json-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    ports:
      - "3001:3000"
    networks:
      - fajma_network
    depends_on:
      - prometheus

  # =============================================================================
  # DEVELOPMENT TOOLS
  # =============================================================================
  
  mailhog:
    image: mailhog/mailhog:latest
    container_name: fajma_mailhog_dev
    restart: unless-stopped
    ports:
      - "1025:1025"  # SMTP
      - "8025:8025"  # Web UI
    networks:
      - fajma_network

  adminer:
    image: adminer:latest
    container_name: fajma_adminer_dev
    restart: unless-stopped
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    ports:
      - "8080:8080"
    networks:
      - fajma_network
    depends_on:
      - postgres

  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: fajma_redis_commander_dev
    restart: unless-stopped
    environment:
      - REDIS_HOSTS=local:redis:6379:1:redis_password
    ports:
      - "8081:8081"
    networks:
      - fajma_network
    depends_on:
      - redis

# =============================================================================
# NETWORKS
# =============================================================================

networks:
  fajma_network:
    driver: bridge
    name: fajma_dev_network

# =============================================================================
# VOLUMES
# =============================================================================

volumes:
  postgres_data:
    name: fajma_postgres_data_dev
  redis_data:
    name: fajma_redis_data_dev
  mosquitto_data:
    name: fajma_mosquitto_data_dev
  mosquitto_logs:
    name: fajma_mosquitto_logs_dev
  backend_static:
    name: fajma_backend_static_dev
  backend_media:
    name: fajma_backend_media_dev
  backend_logs:
    name: fajma_backend_logs_dev
  prometheus_data:
    name: fajma_prometheus_data_dev
  grafana_data:
    name: fajma_grafana_data_dev