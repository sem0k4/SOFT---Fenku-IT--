# =============================================================================
# FAJMA Backend - Pytest Configuration
# =============================================================================

[tool:pytest]
# Test discovery
python_files = tests.py test_*.py *_tests.py
python_classes = Test*
python_functions = test_*

# Test paths
testpaths = tests

# Django settings
DJANGO_SETTINGS_MODULE = fajma.settings.test
addopts = 
    --verbose
    --tb=short
    --strict-markers
    --strict-config
    --disable-warnings
    --reuse-db
    --nomigrations
    --cov=.
    --cov-report=html:htmlcov
    --cov-report=term-missing
    --cov-report=xml
    --cov-fail-under=80
    --maxfail=5
    --durations=10

# Markers
markers =
    slow: marks tests as slow (deselect with '-m "not slow"')
    integration: marks tests as integration tests
    unit: marks tests as unit tests
    api: marks tests as API tests
    websocket: marks tests as WebSocket tests
    iot: marks tests as IoT related tests
    auth: marks tests as authentication related
    database: marks tests that require database
    external: marks tests that require external services
    security: marks tests related to security
    performance: marks performance tests

# Minimum version
minversion = 6.0

# Ignore paths
norecursedirs = 
    .git
    .tox
    dist
    build
    *.egg
    node_modules
    .venv
    venv
    staticfiles
    media
    logs

# Filtering
filterwarnings =
    ignore::UserWarning
    ignore::DeprecationWarning
    ignore::PendingDeprecationWarning
    ignore:.*USE_TZ.*:RuntimeWarning
    ignore:.*DateTimeField.*:RuntimeWarning

# Django database
DATABASE_URL = sqlite:///:memory:

# Test output
junit_family = xunit2
junit_logging = all
junit_log_passing_tests = false

# Coverage configuration
[coverage:run]
source = .
omit = 
    */migrations/*
    */venv/*
    */env/*
    */tests/*
    */test_*
    manage.py
    */settings/*
    */wsgi.py
    */asgi.py
    */urls.py
    */admin.py
    */apps.py
    */__init__.py
    */conftest.py

[coverage:report]
exclude_lines =
    pragma: no cover
    def __repr__
    if self.debug:
    if settings.DEBUG
    raise AssertionError
    raise NotImplementedError
    if 0:
    if __name__ == .__main__.:
    class .*\bProtocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov

[coverage:xml]
output = coverage.xml