# Generated by Django 4.2.7 on 2025-05-27 02:53

import django.contrib.auth.models
import django.core.validators
from django.db import migrations, models
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Ambulance',
            fields=[
                ('ambulance_id', models.AutoField(primary_key=True, serialize=False)),
                ('immatriculation', models.CharField(max_length=20)),
            ],
            options={
                'db_table': 'ambulance',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Analyses',
            fields=[
                ('analyse_id', models.AutoField(primary_key=True, serialize=False)),
                ('type_analyse', models.CharField(max_length=50)),
                ('resultat', models.TextField()),
                ('date', models.DateTimeField()),
            ],
            options={
                'db_table': 'Analyses',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Antecedent',
            fields=[
                ('Antecedent_id', models.AutoField(primary_key=True, serialize=False)),
                ('Description', models.TextField()),
            ],
            options={
                'db_table': 'Antecedent',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Biometrie',
            fields=[
                ('biometrie_id', models.AutoField(primary_key=True, serialize=False)),
                ('GroupeSanguin', models.CharField(choices=[('A+', 'A+'), ('A-', 'A-'), ('B+', 'B+'), ('B-', 'B-'), ('AB+', 'AB+'), ('AB-', 'AB-'), ('O+', 'O+'), ('O-', 'O-')], max_length=10)),
                ('Poids', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0)])),
                ('Taille', models.DecimalField(decimal_places=2, max_digits=5, validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'db_table': 'Biometrie',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CapteurIoT',
            fields=[
                ('capteur_id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(max_length=50)),
                ('DateInstallation', models.DateField()),
                ('Statut', models.CharField(choices=[('actif', 'Actif'), ('inactif', 'Inactif'), ('en panne', 'En panne')], max_length=20)),
            ],
            options={
                'db_table': 'capteuriot',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='CarnetConsultation',
            fields=[
                ('carnet_id', models.AutoField(primary_key=True, serialize=False)),
                ('note', models.TextField()),
                ('date', models.DateTimeField()),
            ],
            options={
                'db_table': 'carnetconsultation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ConseilsSante',
            fields=[
                ('conseil_id', models.AutoField(primary_key=True, serialize=False)),
                ('contenu', models.TextField()),
                ('date_publication', models.DateTimeField()),
            ],
            options={
                'db_table': 'conseils_sante',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Consultation',
            fields=[
                ('consultation_id', models.AutoField(primary_key=True, serialize=False)),
                ('valeur', models.DecimalField(decimal_places=2, max_digits=10)),
                ('Date_Consultation', models.DateTimeField()),
                ('session_video_id', models.CharField(blank=True, max_length=100, null=True)),
                ('Prescription', models.TextField(blank=True, null=True)),
                ('diagnostic', models.TextField(blank=True, null=True)),
                ('Notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'consultation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DeclarationsNaissance',
            fields=[
                ('declaration_id', models.AutoField(primary_key=True, serialize=False)),
                ('date_declaration', models.DateField()),
                ('statut', models.CharField(choices=[('en_attente', 'En attente'), ('validee', 'Validée'), ('rejetee', 'Rejetée')], max_length=20)),
            ],
            options={
                'db_table': 'declarations_naissance',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='DocumentsMedicaux',
            fields=[
                ('document_id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('certificat_medical', 'Certificat médical'), ('attestation_aptitude', 'Attestation d’aptitude'), ('autre', 'Autre')], max_length=50)),
                ('fichier_path', models.CharField(max_length=255)),
                ('date_emission', models.DateField()),
            ],
            options={
                'db_table': 'documents_medicaux',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Facture',
            fields=[
                ('facture_id', models.AutoField(primary_key=True, serialize=False)),
                ('montant', models.DecimalField(decimal_places=2, max_digits=10, validators=[django.core.validators.MinValueValidator(0)])),
                ('date_emission', models.DateField()),
                ('description', models.TextField(blank=True, null=True)),
                ('statut_paiement', models.CharField(choices=[('en_attente', 'En attente'), ('paye', 'Payé'), ('annule', 'Annulé')], default='en_attente', max_length=20)),
            ],
            options={
                'db_table': 'facture',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Hopital',
            fields=[
                ('hopital_id', models.AutoField(primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=100)),
                ('rue', models.CharField(max_length=100)),
                ('ville', models.CharField(max_length=100)),
                ('code_postal', models.CharField(blank=True, max_length=10, null=True)),
                ('Telephone', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone doit être au format international (ex. +221771234567).', regex='^\\+?[1-9]\\d{1,14}$')])),
                ('Email', models.EmailField(db_collation='case_insensitive', max_length=254, validators=[django.core.validators.RegexValidator(message="L'e-mail n'est pas valide.", regex='^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$')])),
                ('capacite', models.IntegerField(validators=[django.core.validators.MinValueValidator(0)])),
            ],
            options={
                'db_table': 'hopital',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HopitalServices',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'hopital_services',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Hospitalisation',
            fields=[
                ('hospitalisation_id', models.AutoField(primary_key=True, serialize=False)),
                ('date_debut', models.DateTimeField()),
                ('date_fin', models.DateTimeField(blank=True, null=True)),
                ('motif', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'hospitalisation',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='LigneOrdonnance',
            fields=[
                ('ligne_id', models.AutoField(primary_key=True, serialize=False)),
                ('quantite', models.PositiveIntegerField()),
                ('posologie', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'LigneOrdonnance',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Lit',
            fields=[
                ('lit_id', models.AutoField(primary_key=True, serialize=False)),
                ('numero', models.PositiveSmallIntegerField()),
            ],
            options={
                'db_table': 'lit',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Logs',
            fields=[
                ('log_id', models.AutoField(primary_key=True, serialize=False)),
                ('action', models.CharField(max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('details', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'logs',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Medecin',
            fields=[
                ('medecin_id', models.AutoField(primary_key=True, serialize=False)),
                ('prenom', models.CharField(max_length=100)),
                ('nom', models.CharField(max_length=100)),
                ('Telephone', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone doit être au format international (ex. +221771234567).', regex='^\\+?[1-9]\\d{1,14}$')])),
                ('Email', models.EmailField(db_collation='case_insensitive', max_length=254, validators=[django.core.validators.RegexValidator(message="L'e-mail n'est pas valide.", regex='^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$')])),
                ('specialite', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'medecin',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Medicaments',
            fields=[
                ('medicaments_id', models.AutoField(primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'medicaments',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Ordonnance',
            fields=[
                ('ordonnance_id', models.AutoField(primary_key=True, serialize=False)),
                ('Date_Ordonnance', models.DateField()),
                ('notes', models.TextField(blank=True, null=True)),
            ],
            options={
                'db_table': 'ordonnance',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Patient',
            fields=[
                ('patient_id', models.AutoField(primary_key=True, serialize=False)),
                ('prenom', models.CharField(max_length=100)),
                ('nom', models.CharField(max_length=100)),
                ('Date_Naissance', models.DateField()),
                ('sexe', models.CharField(blank=True, choices=[('M', 'Masculin'), ('F', 'Féminin'), ('Autre', 'Autre')], max_length=10, null=True)),
                ('numero_identification_national', models.CharField(blank=True, max_length=50, null=True)),
                ('rue', models.CharField(max_length=100)),
                ('ville', models.CharField(max_length=100)),
                ('code_postal', models.CharField(blank=True, max_length=10, null=True)),
                ('Telephone', models.CharField(max_length=15, validators=[django.core.validators.RegexValidator(message='Le numéro de téléphone doit être au format international (ex. +221771234567).', regex='^\\+?[1-9]\\d{1,14}$')])),
                ('Email', models.EmailField(db_collation='case_insensitive', max_length=254, validators=[django.core.validators.RegexValidator(message="L'e-mail n'est pas valide.", regex='^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$')])),
            ],
            options={
                'db_table': 'patient',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RadiographieEchographie',
            fields=[
                ('image_id', models.AutoField(primary_key=True, serialize=False)),
                ('type', models.CharField(choices=[('radiographie', 'Radiographie'), ('echographie', 'Échographie'), ('autre', 'Autre')], max_length=50)),
                ('fichier_path', models.CharField(max_length=255)),
                ('date', models.DateTimeField()),
            ],
            options={
                'db_table': 'RadiographieEchographie',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='RendezVous',
            fields=[
                ('rdv_id', models.AutoField(primary_key=True, serialize=False)),
                ('date', models.DateTimeField()),
                ('statut', models.CharField(choices=[('planifie', 'Planifié'), ('annule', 'Annulé'), ('termine', 'Terminé')], default='planifie', max_length=20)),
            ],
            options={
                'db_table': 'rendezvous',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Salle',
            fields=[
                ('salle_id', models.AutoField(primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'salle',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ServiceAccueil',
            fields=[
                ('service_id', models.AutoField(primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'serviceaccueil',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Services',
            fields=[
                ('service_id', models.AutoField(primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=100)),
            ],
            options={
                'db_table': 'services',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='TypesAntecedents',
            fields=[
                ('type_id', models.AutoField(primary_key=True, serialize=False)),
                ('nom', models.CharField(max_length=50)),
            ],
            options={
                'db_table': 'types_antecedents',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Utilisateur',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_id', models.AutoField(primary_key=True, serialize=False)),
                ('role', models.CharField(choices=[('patient', 'Patient'), ('medecin', 'Médecin'), ('admin', 'Administrateur')], max_length=20)),
                ('date_creation', models.DateTimeField(auto_now_add=True)),
                ('email_verifie', models.BooleanField(default=False)),
                ('username', models.CharField(max_length=50, unique=True)),
                ('email', models.EmailField(db_collation='case_insensitive', max_length=254, unique=True, validators=[django.core.validators.RegexValidator(message="L'e-mail n'est pas valide.", regex='^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Za-z]{2,}$')])),
            ],
            options={
                'db_table': 'utilisateur',
                'managed': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]